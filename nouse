# mouse_method.py (or nouse.py) - v7 (Split if/try/except line)
# Takes a screenshot on trigger, asks AI for the location of the correct MC answer,
# and moves the mouse cursor to that location.

import sys
import os
import platform
import importlib
import time
import threading
import signal
import io
import traceback
import re # For parsing coordinates

# --- Attempt to Import Core Libraries ---
try:
    import keyboard
    import mss
    import mss.tools
    # Ensure PIL.Image is imported correctly
    from PIL import Image
    import google.generativeai as genai
    import google.api_core.exceptions
    import pyautogui
except ImportError as e:
    print(f"[Startup Info] Initial import check failed for '{e.name}'.")
    keyboard = mss = Image = genai = google = pyautogui = None

# --- Configuration ---
GOOGLE_API_KEY = "YOUR_GOOGLE_API_KEY_HERE" # <<<--- CHECKER INJECTS HERE

REQUIRED_LIBRARIES = ["keyboard", "mss", "Pillow", "google-generativeai", "pyautogui"]
TRIGGER_KEY = '='
SUPPRESS_TRIGGER = True
AI_MODEL_NAME = "gemini-1.5-flash-latest"
# AI_MODEL_NAME = "gemini-1.5-pro-latest"
MOUSE_MOVE_DURATION = 0.25

# --- State ---
process_lock = threading.Lock()
running = True

# === SETUP FUNCTIONS ===

def check_windows():
    print("--- Checking Operating System ---")
    if platform.system() != "Windows": print("ERROR: Windows only."); return False
    print("OS: Windows (OK)."); return True

def check_python_version():
    print("\n--- Checking Python Version ---")
    if sys.version_info < (3, 8): print(f"ERROR: Python 3.8+ required."); return False
    print(f"Python {platform.python_version()} OK."); return True

def install_libraries():
    print("\n--- Verifying Required Libraries ---")
    all_found = True
    for lib in REQUIRED_LIBRARIES:
        import_name = lib; found = False
        if lib == 'Pillow': import_name = 'PIL'
        elif lib == 'google-generativeai': import_name = 'google.generativeai'
        try:
            if importlib.util.find_spec(import_name): print(f"- '{lib}' found."); found = True
            else: print(f"- '{lib}' NOT FOUND.")
        except Exception as e: print(f"Warn: Error check '{lib}': {e}")
        if not found: all_found = False

    if not all_found: print("\nERROR: Libs missing.", file=sys.stderr); return False
    else:
        print("All required libs appear installed. Importing...")
        try:
            global keyboard, mss, mss_tools, Image, genai, google_api_core_exceptions, pyautogui
            import keyboard, mss, mss.tools as mss_tools
            from PIL import Image # Correct import
            import google.generativeai as genai, google.api_core.exceptions as google_api_core_exceptions
            import pyautogui
            pyautogui.FAILSAFE = False; print(f"PyAutoGUI FAILSAFE={pyautogui.FAILSAFE}")
            print("Core libs imported."); return True
        except Exception as e: print(f"ERROR: Final import failed: {e}", file=sys.stderr); traceback.print_exc(file=sys.stderr); return False

# === MAIN APPLICATION FUNCTIONS ===

def move_mouse_to_answer(box_coords, monitor_info):
    print("--- Attempting Mouse Movement ---")
    global running, pyautogui
    if pyautogui is None: print("ERROR: PyAutoGUI not loaded.", file=sys.stderr); return False
    if not box_coords or len(box_coords) != 4: print(f"ERROR: Invalid coords: {box_coords}", file=sys.stderr); return False
    try:
        x_min, y_min, x_max, y_max = map(int, box_coords)
        if x_min >= x_max or y_min >= y_max: print(f"ERROR: Invalid box (min>=max): {box_coords}", file=sys.stderr); return False
        center_x_rel=(x_min+x_max)//2; center_y_rel=(y_min+y_max)//2
        absolute_x=monitor_info['left']+center_x_rel; absolute_y=monitor_info['top']+center_y_rel
        print(f"Target Box(rel): [{x_min},{y_min},{x_max},{y_max}], Abs Coords: ({absolute_x}, {absolute_y})")
        print(f"Executing pyautogui.moveTo({absolute_x}, {absolute_y}, duration={MOUSE_MOVE_DURATION})...")
        pyautogui.moveTo(absolute_x, absolute_y, duration=MOUSE_MOVE_DURATION)
        final_x, final_y = pyautogui.position(); print(f"Pos after move: ({final_x}, {final_y})")
        if abs(final_x-absolute_x)>5 or abs(final_y-absolute_y)>5: print("Warn: Mouse pos differs from target.")
        print("--- Mouse Move Attempt Finished ---"); return True
    except Exception as e: print(f"!!! ERROR during mouse move: {e}", file=sys.stderr); return False

def get_answer_location_from_ai(pil_image):
    print(f"--- Asking AI ({AI_MODEL_NAME}) for Location ---")
    global running, genai, GOOGLE_API_KEY
    if not running: print("AI skipped: Shutdown."); return None
    if genai is None: print("ERROR: GenAI lib not loaded.", file=sys.stderr); return None
    try:
         if 'GOOGLE_API_KEY' not in globals() or not GOOGLE_API_KEY or GOOGLE_API_KEY == "YOUR_GOOGLE_API_KEY_HERE": raise NameError("API Key missing")
    except NameError: print("!!! FATAL: API Key missing/invalid.", file=sys.stderr); return None
    try: model = genai.GenerativeModel(AI_MODEL_NAME)
    except Exception as e: print(f"ERROR: Failed init Gemini: {e}", file=sys.stderr); return None
    prompt = """
Analyze image: MC question. 1. Read Q&A. 2. Use knowledge for best answer.
3. ID bounding box (xmin,ymin,xmax,ymax) for *entire text* of the correct answer option. Coords relative to image (0,0 top-left).
4. Respond ONLY: BOX=[xmin,ymin,xmax,ymax] Example: BOX=[150,300,450,325]
5. If unsure/cannot, respond ONLY: ERROR
No letter/explanation. Just BOX=[...] or ERROR.
"""
    try:
        print(f"Sending prompt to Gemini '{AI_MODEL_NAME}'..."); start_time = time.time()
        response = model.generate_content([prompt, pil_image], generation_config=genai.types.GenerationConfig(temperature=0.0), request_options={'timeout': 120})
        duration = time.time() - start_time; print(f"Gemini response in {duration:.2f}s.")
        raw_response_text = "Unavailable"
        if response.candidates:
            try: raw_response_text = response.text
            except Exception as e_text: raw_response_text = f"Blocked/Error: {e_text}. Feedback: {response.prompt_feedback}"
        else: raw_response_text = f"No candidates. Feedback: {response.prompt_feedback}"
        print(f"AI Raw: '{raw_response_text}'"); ai_response_text = raw_response_text.strip()
        if "ERROR" in ai_response_text.upper(): print("AI responded ERROR."); return None
        match = re.search(r"BOX\s*=\s*\[\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\]", ai_response_text)
        if match:
            coords = [int(c) for c in match.groups()]
            if coords[0] < coords[2] and coords[1] < coords[3]: print(f"Parsed Coords: {coords}"); return coords
            else: print(f"Parsed invalid coords: {coords}"); return None
        else: print("AI response format mismatch."); return None
    except Exception as e: print(f"!!! ERROR during Gemini call: {e}", file=sys.stderr); return None

def process_screenshot_and_move_mouse():
    print("\n=== Starting Screenshot and Processing Cycle ===")
    global running, mss, Image, process_lock, pyautogui, keyboard
    screenshot_pil_img = monitor_info = coords = None
    start_time = time.time()
    lock_released = False

    def release_lock_if_held(reason=""):
        nonlocal lock_released
        if process_lock.locked():
            try: process_lock.release(); print(f"Lock released: {reason}"); lock_released = True
            except RuntimeError: print(f"Warn: Lock release failed ({reason}) - not owned?")

    try: # >>>>> OUTER TRY for whole process <<<<<<
        if not all([mss, Image, pyautogui, keyboard]): print("ERROR: Core libs not available.", file=sys.stderr); return
        print("Taking screenshot...")
        screenshot_exception = None
        try: # Minimal block for screenshot errors
            with mss.mss() as sct:
                monitor_index = 1 if len(sct.monitors) > 1 else 0
                if not sct.monitors: print("FATAL: No monitors detected.", file=sys.stderr); return
                monitor_info = sct.monitors[monitor_index]; print(f"Using monitor {monitor_index}: {monitor_info}")
                sct_img = sct.grab(monitor_info); print(f"Captured ({sct_img.width}x{sct_img.height}). Converting...")
                screenshot_pil_img = Image.frombytes("RGB", sct_img.size, sct_img.bgra, "raw", "BGRX")
                print("Screenshot converted.")
        except Exception as scr_e: screenshot_exception = scr_e; print(f"!!! ERROR during screenshot: {scr_e}", file=sys.stderr)

        if not running: print("Interrupted after screenshot."); return
        if screenshot_pil_img is None: print(f"Screenshot failed{f': {screenshot_exception}' if screenshot_exception else '.'}."); return

        coords = get_answer_location_from_ai(screenshot_pil_img)
        if not running: print("Interrupted after AI call."); return

        if coords and monitor_info: move_mouse_to_answer(coords, monitor_info)
        elif coords is None: print("No valid coords from AI. Mouse not moved.")
        else: print("Cannot move mouse: Coords/Monitor info missing.")

    finally: # >>>>> OUTER FINALLY <<<<<<
        cycle_duration = time.time() - start_time; print(f"Processing cycle finished in {cycle_duration:.2f}s.")
        release_lock_if_held("End of cycle")
        print("=== Screenshot and Processing Cycle Complete ===")

def handle_trigger():
    global running, process_lock
    if not running: print("Trigger ignored: Shutdown."); return
    print(f"\n'{TRIGGER_KEY}' key detected!")
    if process_lock.acquire(blocking=False):
        print("Acquired lock. Starting analysis thread..."); thread = threading.Thread(target=process_screenshot_and_move_mouse, daemon=True); thread.start()
    else: print("Processing already in progress. Ignoring trigger.")

def signal_handler(sig, frame):
    global running
    if running: print("\n!!! Shutdown signal received !!!"); running = False

# === MAIN EXECUTION BLOCK ===
def run_main_application():
    global running, genai, GOOGLE_API_KEY, keyboard, pyautogui
    print("\n--- Starting Gemini Mouse Mover Application ---")
    try: # Configure AI
        if 'GOOGLE_API_KEY' not in globals() or not GOOGLE_API_KEY or GOOGLE_API_KEY == "YOUR_GOOGLE_API_KEY_HERE": raise NameError("API Key missing")
        if genai is None: raise ImportError("GenAI lib missing")
        print(f"Configuring Google AI SDK (model: {AI_MODEL_NAME})..."); genai.configure(api_key=GOOGLE_API_KEY); print("SDK Configured.")
    except Exception as e: print(f"!!! FATAL ERROR config AI: {e}", file=sys.stderr); return

    print("\n--- Performing Quick PyAutoGUI Test ---") # PyAutoGUI Test
    try:
        if pyautogui is None: raise ImportError("PyAutoGUI lib missing")
        start_x, start_y = pyautogui.position(); print(f"Start:({start_x},{start_y}). Moving..."); pyautogui.moveRel(10, 10, duration=0.1); time.sleep(0.1); end_x, end_y = pyautogui.position()
        print(f"End:({end_x},{end_y}). Moving back..."); pyautogui.moveTo(start_x, start_y, duration=0.1); time.sleep(0.1); final_x, final_y = pyautogui.position(); print(f"Final:({final_x},{final_y})")
        if abs(end_x-(start_x+10))<5 and abs(final_x-start_x)<5 : print("PyAutoGUI test SUCCESSFUL.")
        else: print("!!! PyAutoGUI test WARNING: Move inaccurate. Permissions? !!!")
    except Exception as e_test: print(f"!!! PyAutoGUI test FAILED: {e_test}", file=sys.stderr)
    print("--- PyAutoGUI Test Complete ---")

    print("\nSetting up signal handler (Ctrl+C)..."); signal.signal(signal.SIGINT, signal_handler); print("Handler set.")

    # --- Setup Listener & Main Loop ---
    print("\n--- Setting up Keyboard Listener ---")
    listener_success = False
    try: # >>>>> OUTER TRY for listener/loop <<<<<<
        if keyboard is None: raise ImportError("'keyboard' lib missing.")
        print("\n"+"="*60+"\nIMPORTANT: Waiting for '{TRIGGER_KEY}'. Run LAUNCHER As Admin!\n"+"="*60+"\n")
        keyboard.add_hotkey(TRIGGER_KEY, handle_trigger, trigger_on_release=False, suppress=SUPPRESS_TRIGGER)
        print("Listener active."); listener_success = True

        print("Entering main loop...")
        while running:
            time.sleep(0.5)
        print("Main loop exited.")
    except ImportError as e: # >>>>> EXCEPT (aligned with try) <<<<<<
        print(f"\n!!! ERROR: Lib '{e.name}' unavailable.", file=sys.stderr); running = False
    except Exception as e: # >>>>> EXCEPT (aligned with try) <<<<<<
        print(f"\n!!! ERROR listener/loop: {e} !!!", file=sys.stderr)
        e_str=str(e).lower();
        if isinstance(e, OSError) or "permission" in e_str or "admin" in e_str: print(">>> Check Admin Privs! <<<", file=sys.stderr)
        else: traceback.print_exc(file=sys.stderr)
        running = False
    finally: # >>>>> FINALLY (aligned with try) <<<<<<
        print("\n--- Script Stopping: Cleaning Up ---")
        running = False # Ensure flag is set

        # --- CORRECTED LOCK RELEASE BLOCK ---
        if process_lock.locked():
            print("Releasing process lock during final cleanup...")
            try:
                process_lock.release()
            except Exception as lock_err: # More specific error might be RuntimeError
                print(f" - Warn: Error releasing lock on exit: {lock_err}")
        # --- END CORRECTION ---

        print("Cleaning up kbd hooks...");
        if listener_success and keyboard:
            try:
                keyboard.unhook_all()
                print("Hooks removed.")
            except Exception as uh_e:
                print(f"Warn: {uh_e}", file=sys.stderr)
        else: print("Skipping kbd unhook.")
        print("--- Cleanup Complete ---")

# --- Script Entry Point ---
if __name__ == "__main__":
    print("="*60 + "\n== Gemini Mouse Mover MC (Mouse Method) ==\n" + "="*60)
    print("\n=== Phase 1: Setup Checks ==="); start_time_main = time.time()
    if not check_windows(): sys.exit(1)
    if not check_python_version(): sys.exit(1)
    if not install_libraries(): print("\nSetup failed: Libs.", file=sys.stderr); sys.exit(1)
    print(f"\n--- Setup OK ({time.time()-start_time_main:.2f}s) ---")
    print("\n=== Phase 2: Starting Main App ===")
    run_main_application()
    print(f"\n=== App Finished ({time.time()-start_time_main:.2f}s total) ===")
