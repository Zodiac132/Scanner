# CHECKER/LAUNCHER SCRIPT - CORRECTED execute_downloaded_code FOR ENCODING
import requests
import hashlib
import os
import sys
import time
import traceback
import subprocess
import ctypes
import re # For finding insertion point

# --- GUI Imports ---
import tkinter as tk
from tkinter import messagebox

# --- Configuration ---
# !!! IMPORTANT: This should be your actual key !!!
GOOGLE_API_KEY_VALUE = "AIzaSyC4acqyS_WwxhQNMNnuPP-cISu0tV43-Dg" # <<<--- VERIFY/REPLACE THIS VALUE!

# URLs
ACCESS_KEY_URL = "https://raw.githubusercontent.com/Zodiac132/Scanner/refs/heads/main/key"
DEFAULT_CODE_URL = "https://raw.githubusercontent.com/Zodiac132/Scanner/refs/heads/main/code.py" # Capslock
MOUSE_METHOD_CODE_URL = "https://raw.githubusercontent.com/Zodiac132/Scanner/refs/heads/main/nouse" # Mouse + OCR

# File/Path Settings
HASH_FILE_TEMPLATE = "last_code_hash_{}.txt"
CHECK_INTERVAL_SECONDS = 60 * 5  # 5 minutes
DOWNLOADED_SCRIPT_FOLDER_NAME = "Documents" # Where scripts are saved

# --- UI Styling ---
BG_COLOR = 'black'; FG_COLOR = 'white'; ENTRY_BG_COLOR = 'black'
BUTTON_ACTIVE_BG = '#333333'; PLACEHOLDER_COLOR = 'grey'

# --- Global flags ---
ACCESS_KEY_VALIDATED = False
SELECTED_CODE_URL = None # Stores the URL of the chosen method

# --- Placeholder Text ---
PLACEHOLDER_TEXT = "KEY HERE"

# --- Core Functions ---
def fetch_remote_data(url, data_description="data"):
    print(f"Fetching {data_description} from: {url}")
    headers = {'Cache-Control': 'no-cache', 'Pragma': 'no-cache', 'User-Agent': 'Mozilla/5.0'}
    try:
        response = requests.get(url, timeout=30, headers=headers)
        response.raise_for_status()
        print(f"Fetch successful for {data_description}.")
        return response.text
    except requests.exceptions.Timeout:
        print(f"Error: Timeout fetching {data_description} from {url}", file=sys.stderr)
        return None
    except requests.exceptions.RequestException as e:
        print(f"Error fetching {data_description} from {url}: {e}", file=sys.stderr)
        return None
    except Exception as e:
        print(f"Unexpected error fetching {data_description}: {e}", file=sys.stderr)
        return None

def get_valid_access_keys():
    key_data = fetch_remote_data(ACCESS_KEY_URL, "valid access keys list")
    if key_data is None: return None
    valid_keys = [line.strip() for line in key_data.splitlines() if line.strip()]
    print(f"Found {len(valid_keys)} potential access keys.")
    return valid_keys

def get_documents_folder():
    try:
        home_dir = os.path.expanduser("~")
        documents_folder = os.path.join(home_dir, DOWNLOADED_SCRIPT_FOLDER_NAME)
        os.makedirs(documents_folder, exist_ok=True)
        return documents_folder
    except Exception as e:
        error_msg = f"Error accessing/creating Documents folder: {e}"
        print(error_msg, file=sys.stderr)
        try: tk.messagebox.showerror("File System Error", error_msg)
        except Exception: pass
        return None

def get_checker_data_dir():
    try:
        app_data_dir = os.getenv('APPDATA')
        if app_data_dir and os.name == 'nt':
            checker_cache_dir = os.path.join(app_data_dir, "CheckerAppCache")
        else:
            checker_cache_dir = os.path.join(os.path.expanduser("~"), ".checkerapp_cache")
        os.makedirs(checker_cache_dir, exist_ok=True)
        return checker_cache_dir
    except Exception as e:
        print(f"Error getting/creating checker data directory: {e}", file=sys.stderr)
        try: # Fallback to script directory (less ideal)
            script_dir = os.path.dirname(sys.executable) if getattr(sys, 'frozen', False) else os.path.dirname(os.path.abspath(__file__))
            print(f"Warning: Using script directory for hash file due to error: {script_dir}", file=sys.stderr)
            os.makedirs(script_dir, exist_ok=True)
            return script_dir
        except Exception as e2: print(f"CRITICAL: Failed to get any directory for hash file: {e2}", file=sys.stderr); return None

def calculate_hash(data_string):
    if data_string is None: return None
    return hashlib.sha256(data_string.encode('utf-8')).hexdigest()

def read_last_hash(filepath):
    if not filepath or not os.path.exists(filepath): return None
    try:
        with open(filepath, 'r', encoding='utf-8') as f: return f.read().strip() or None
    except Exception as e: print(f"Error reading hash from {filepath}: {e}", file=sys.stderr); return None

def write_last_hash(filepath, current_hash):
    if not filepath: print("Error: Invalid filepath for hash.", file=sys.stderr); return False
    try:
        os.makedirs(os.path.dirname(filepath), exist_ok=True)
        with open(filepath, 'w', encoding='utf-8') as f: f.write(current_hash)
        print(f"Wrote new hash to '{filepath}'")
        return True
    except Exception as e: print(f"Error writing hash to {filepath}: {e}", file=sys.stderr); return False

def inject_api_key(code_string, api_key):
    """Injects the GOOGLE_API_KEY definition, preferably replacing a placeholder."""
    print("--- Attempting API Key Injection ---")
    already_present_pattern = rf'^\s*GOOGLE_API_KEY\s*=\s*"{re.escape(api_key)}"'
    if re.search(already_present_pattern, code_string, re.MULTILINE):
        print("API Key already present and correct. Skipping injection.")
        return code_string

    placeholder_line_pattern = r'^\s*GOOGLE_API_KEY\s*=\s*".*"\s*#\s*<<<--- CHECKER INJECTS HERE'
    key_injection_line = f'GOOGLE_API_KEY = "{api_key}" # Injected by checker'

    code_string, num_replacements = re.subn(placeholder_line_pattern, key_injection_line, code_string, count=1, flags=re.MULTILINE)

    if num_replacements > 0:
        print("Successfully injected API key by replacing placeholder line.")
    else:
        # Fallback logic (inject near top) - Less ideal but better than nothing
        print("Warning: Placeholder line not found. Using fallback injection.")
        lines = code_string.splitlines()
        injection_index = min(1, len(lines)) # Inject at line 2 (index 1) or 1 if only one line
        lines.insert(injection_index, key_injection_line)
        code_string = "\n".join(lines)
        print(f"API Key injected via fallback near line {injection_index + 1}.")

    print("--- Finished API Key Injection Attempt ---")
    return code_string

# --- UPDATED execute_downloaded_code Function ---
def execute_downloaded_code(code_string_with_key, url, target_dir):
    """
    Saves the modified code and executes it.
    Sets PYTHONIOENCODING=UTF-8 for subprocesses to handle potential console output issues.
    Uses exec() if running as frozen, subprocess otherwise.
    """
    if not target_dir:
        print("Error: No valid target directory provided for execution.", file=sys.stderr)
        return False

    # Determine filename based on URL (simple approach - adapt if needed)
    downloaded_script_filename = os.path.basename(url)
    if not os.path.splitext(downloaded_script_filename)[1]:
        downloaded_script_filename += ".py"
    script_path = os.path.join(target_dir, downloaded_script_filename)

    is_frozen = getattr(sys, 'frozen', False)

    print("\n" + "="*60)
    print(f"PREPARING TO EXECUTE: {script_path}")
    print(f"From URL: {url}")
    print(f"Running as frozen executable: {is_frozen}")
    print("="*60)

    # --- Save the code ---
    try:
        print(f"Saving code [WITH INJECTED KEY] to '{script_path}'...")
        os.makedirs(target_dir, exist_ok=True)
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(code_string_with_key)
        print("Code saved.")
    except Exception as e:
        print(f"!!! ERROR saving code to '{script_path}': {e}", file=sys.stderr)
        traceback.print_exc(file=sys.stderr)
        return False

    if not os.path.exists(script_path):
        print(f"!!! CRITICAL ERROR: Failed to save or find {script_path}.", file=sys.stderr)
        return False
    print(f"Verified script exists: {script_path}")

    # --- Execute the saved script ---
    execution_successful = False
    original_cwd = os.getcwd()

    try:
        if is_frozen:
            # --- FROZEN (.EXE) MODE: Use exec() ---
            print("\n--- Executing script using exec() [Frozen Mode] ---")
            script_dir = os.path.dirname(script_path)
            print(f"Target script: {script_path}")
            if not os.path.isdir(script_dir):
                 print(f"ERROR: Script directory '{script_dir}' missing.", file=sys.stderr); return False

            print(f"Attempting to change CWD to: {script_dir}")
            try:
                os.chdir(script_dir); print(f"Changed CWD to: {os.getcwd()}")
                compiled_code = compile(code_string_with_key, script_path, 'exec')
                exec_globals = {"__file__": script_path, "__name__": "__main__"}
                exec(compiled_code, exec_globals)
                print(f"--- Script '{downloaded_script_filename}' finished via exec() ---")
                execution_successful = True
            except SystemExit as se:
                 print(f"--- Script '{downloaded_script_filename}' SystemExit({se.code}) ---")
                 execution_successful = (se.code == 0 or se.code is None)
            except Exception as e:
                print(f"\n!!! ERROR DURING exec() of {script_path}: {e} !!!", file=sys.stderr)
                traceback.print_exc(file=sys.stderr); execution_successful = False
            finally:
                 try: os.chdir(original_cwd); print(f"Restored CWD to: {os.getcwd()}")
                 except Exception as cd_err: print(f"Warn: Failed restore CWD: {cd_err}", file=sys.stderr)

        else:
            # --- NORMAL (.PY) MODE: Use subprocess ---
            print(f"\n--- Executing script via subprocess [Non-Frozen Mode] ---")
            interpreter_path = sys.executable
            script_dir = os.path.dirname(script_path)
            print(f"Interpreter: {interpreter_path}")
            cmd = [interpreter_path, script_path]
            print(f"Command: {' '.join(cmd)}")
            print(f"Working Directory for subprocess: {script_dir}")

            # --- Set PYTHONIOENCODING=UTF-8 for the subprocess environment ---
            subprocess_env = os.environ.copy()
            subprocess_env["PYTHONIOENCODING"] = "UTF-8"
            print("Setting PYTHONIOENCODING=UTF-8 for subprocess environment.")
            # --- End Environment Modification ---

            process = None
            try:
                # Pass the modified environment using the 'env' parameter
                process = subprocess.run(cmd, cwd=script_dir, capture_output=True, text=True,
                                         encoding='utf-8', errors='replace', check=False, timeout=300,
                                         env=subprocess_env) # <<<--- Pass modified env here

                print("\n--- Subprocess Execution Finished ---")
                print(f"Return Code: {process.returncode}")
                # Limit preview length to avoid flooding console
                stdout_preview = (process.stdout or "").strip()[:1000]
                stderr_preview = (process.stderr or "").strip()[:1500] # Allow more stderr
                print(f"--- Stdout (preview): ---\n{stdout_preview}{'...' if len(process.stdout or '') > 1000 else ''}")
                if process.stderr: print(f"--- Stderr (preview): ---\n{stderr_preview}{'...' if len(process.stderr or '') > 1500 else ''}\n------------------------", file=sys.stderr)
                else: print("--- Stderr: (No output) ---")

                execution_successful = (process.returncode == 0)
                if not execution_successful: print(f"!!! SCRIPT '{downloaded_script_filename}' FAILED via subprocess (RC: {process.returncode}) !!!", file=sys.stderr)

            except subprocess.TimeoutExpired:
                 print(f"\n!!! ERROR: Subprocess timed out !!!", file=sys.stderr)
                 execution_successful = False
            except Exception as e:
                print(f"\n!!! ERROR DURING SUBPROCESS LAUNCH/execution: {e} !!!", file=sys.stderr)
                traceback.print_exc(file=sys.stderr)
                execution_successful = False

    finally:
        print(f"--- execute_downloaded_code finished. Overall Success: {execution_successful} ---")

    return execution_successful
# --- END of updated execute_downloaded_code function ---

# --- Tkinter UI Functions ---
def clear_window_widgets(window):
    for widget in window.winfo_children(): widget.destroy()

def on_entry_click(event, entry_widget):
    if entry_widget.get() == PLACEHOLDER_TEXT:
        entry_widget.delete(0, "end"); entry_widget.config(fg=FG_COLOR)

def on_focusout(event, entry_widget):
    if entry_widget.get() == '':
        entry_widget.delete(0, "end"); entry_widget.insert(0, PLACEHOLDER_TEXT); entry_widget.config(fg=PLACEHOLDER_COLOR)

def capslock_button_callback(window):
    global SELECTED_CODE_URL
    print("CAPSLOCK method selected.")
    SELECTED_CODE_URL = DEFAULT_CODE_URL; window.destroy()

def mouse_method_button_callback(window):
    global SELECTED_CODE_URL
    print("MOUSE METHOD selected.")
    SELECTED_CODE_URL = MOUSE_METHOD_CODE_URL; window.destroy()

def show_choice_view(window):
    clear_window_widgets(window); window.title("Select Method"); window.geometry("350x150")
    label = tk.Label(window, text="Choose Execution Method:", bg=BG_COLOR, fg=FG_COLOR); label.pack(pady=20)
    caps_button = tk.Button(window, text="CAPSLOCK", command=lambda: capslock_button_callback(window),
                            bg=BG_COLOR, fg=FG_COLOR, activebackground=BUTTON_ACTIVE_BG, activeforeground=FG_COLOR, relief=tk.FLAT, padx=10, pady=5)
    caps_button.pack(pady=5)
    mouse_method_button = tk.Button(window, text="MOUSE METHOD", command=lambda: mouse_method_button_callback(window),
                                   bg=BG_COLOR, fg=FG_COLOR, activebackground=BUTTON_ACTIVE_BG, activeforeground=FG_COLOR, relief=tk.FLAT, padx=10, pady=5)
    mouse_method_button.pack(pady=5)

def check_access_key_callback(entry_widget, window):
    global ACCESS_KEY_VALIDATED
    entered_key = entry_widget.get().strip()
    if not entered_key or entered_key == PLACEHOLDER_TEXT: messagebox.showerror("Error", "Please enter a key."); return

    print("Checking access key...")
    valid_keys = get_valid_access_keys()
    if valid_keys is None: messagebox.showerror("Error", "Failed to fetch valid keys."); return

    if entered_key in valid_keys:
        print("Access Key VALID."); ACCESS_KEY_VALIDATED = True; show_choice_view(window)
    else:
        print("Access Key INVALID."); messagebox.showerror("Error", "Invalid key."); ACCESS_KEY_VALIDATED = False
        entry_widget.delete(0, tk.END); on_focusout(None, entry_widget)

def create_and_run_gui():
    window = tk.Tk(); window.title("Enter Key"); window.geometry("350x150"); window.resizable(False, False); window.configure(bg=BG_COLOR)
    window.eval('tk::PlaceWindow . center')
    label = tk.Label(window, text="Enter your access key:", bg=BG_COLOR, fg=FG_COLOR); label.pack(pady=10)
    key_entry = tk.Entry(window, width=35, fg=PLACEHOLDER_COLOR, bg=ENTRY_BG_COLOR, insertbackground=FG_COLOR, relief=tk.FLAT, bd=2)
    key_entry.insert(0, PLACEHOLDER_TEXT)
    key_entry.bind('<FocusIn>', lambda ev: on_entry_click(ev, key_entry)); key_entry.bind('<FocusOut>', lambda ev: on_focusout(ev, key_entry)); key_entry.pack(pady=5, padx=10)
    check_button = tk.Button(window, text="Check Key", command=lambda: check_access_key_callback(key_entry, window),
                             bg=BG_COLOR, fg=FG_COLOR, activebackground=BUTTON_ACTIVE_BG, activeforeground=FG_COLOR, relief=tk.FLAT, padx=10, pady=5)
    check_button.pack(pady=15); window.mainloop()

# --- Main Function (Orchestrator) ---
def main():
    global ACCESS_KEY_VALIDATED, SELECTED_CODE_URL, GOOGLE_API_KEY_VALUE

    # --- Initial Google API Key Check ---
    placeholder_keys = ["YOUR_GOOGLE_API_KEY_HERE", "PASTE_YOUR_REAL_GOOGLE_AI_API_KEY_HERE", ""]
    current_key = GOOGLE_API_KEY_VALUE.strip()
    if not current_key or any(p in current_key for p in placeholder_keys if p):
        err_msg = "CRITICAL SETUP ERROR: Google AI API Key missing or placeholder.\nPlease replace placeholder in checker script."
        print("!"*60 + f"\n!!! {err_msg} !!!\n" + "!"*60)
        try: root = tk.Tk(); root.withdraw(); messagebox.showerror("Setup Error", err_msg); root.destroy()
        except Exception as gui_err: print(f"(Could not display GUI error: {gui_err})", file=sys.stderr)
        sys.exit(1)

    # --- Run GUI ---
    print("Starting UI for access key authentication...")
    create_and_run_gui()

    # --- Check UI Completion ---
    if not ACCESS_KEY_VALIDATED: print("Access key not validated. Exiting."); sys.exit(0)
    if not SELECTED_CODE_URL: print("Method not selected. Exiting."); sys.exit(0)

    method_name = "Unknown"
    hash_file_suffix = "unknown"
    if SELECTED_CODE_URL == DEFAULT_CODE_URL: method_name, hash_file_suffix = "CAPSLOCK", "capslock_method"
    elif SELECTED_CODE_URL == MOUSE_METHOD_CODE_URL: method_name, hash_file_suffix = "MOUSE METHOD", "mouse_method"
    print(f"\nAccess Key OK & Method chosen ({method_name}). Proceeding to background checker...\n")

    # --- Setup Paths ---
    checker_data_dir = get_checker_data_dir()
    if not checker_data_dir: print("CRITICAL: Could not determine data directory. Exiting.", file=sys.stderr); sys.exit(1)
    hash_file = os.path.join(checker_data_dir, HASH_FILE_TEMPLATE.format(hash_file_suffix)); print(f"Using hash file: {hash_file}")
    documents_folder = get_documents_folder()
    if not documents_folder: print("Failed to get Documents folder. Exiting."); sys.exit(1)
    dl_filename = os.path.basename(SELECTED_CODE_URL); dl_filename += ".py" if not os.path.splitext(dl_filename)[1] else ""
    print(f"Target directory for {dl_filename}: {documents_folder}")

    # --- Admin Check ---
    is_admin = False
    try:
        if os.name == 'nt': is_admin = ctypes.windll.shell32.IsUserAnAdmin() != 0; print(f"\nRunning as admin: {is_admin}")
        else: print("\nNon-Windows OS. Admin check skipped.")
        if not is_admin: print(f"WARNING: Not running as admin. '{dl_filename}' might require admin rights.")
    except Exception as e: print(f"\nWarning: Error checking admin status: {e}.")

    # --- Background Loop ---
    last_known_hash = read_last_hash(hash_file); print(f"Initial hash for {method_name}: {last_known_hash or 'None'}")
    print(f"\nStarting checker loop for {method_name}. Checking every {CHECK_INTERVAL_SECONDS}s.")
    print("(Running silently in background)")

    while True:
        try:
            print(f"\n[{time.strftime('%Y-%m-%d %H:%M:%S')}] --- {method_name} Cycle Start ---")
            current_base_code = fetch_remote_data(SELECTED_CODE_URL, f"base code for {method_name}")
            if current_base_code is not None:
                current_hash = calculate_hash(current_base_code); print(f"Fetched base code. Hash: {current_hash}")
                if current_hash != last_known_hash:
                    print(f">>> Hash mismatch! Update required.")
                    code_with_key = inject_api_key(current_base_code, GOOGLE_API_KEY_VALUE)
                    if code_with_key:
                        # Execute with the updated function (handles encoding)
                        execution_successful = execute_downloaded_code(code_with_key, SELECTED_CODE_URL, documents_folder)
                        if execution_successful:
                            print("Execution successful. Updating hash.")
                            if write_last_hash(hash_file, current_hash): last_known_hash = current_hash
                            else: print("Error: Failed writing updated hash file.", file=sys.stderr)
                        else: print(f"Execution FAILED for {method_name}. Hash NOT updated.")
                    else: print("!!! CRITICAL: Failed to inject API key. Hash NOT updated.", file=sys.stderr); time.sleep(CHECK_INTERVAL_SECONDS*2)
                else: print("Base code hash matches. No update needed.")
            else: print(f"Fetch failed for {method_name}. Will retry.")

            print(f"--- {method_name} Cycle End --- Waiting {CHECK_INTERVAL_SECONDS}s...")
            time.sleep(CHECK_INTERVAL_SECONDS)

        except KeyboardInterrupt: print("\nCtrl+C received. Exiting checker."); break
        except Exception as loop_err:
            print(f"\n!!! UNEXPECTED ERROR IN CHECKER LOOP ({method_name}): {loop_err} !!!", file=sys.stderr)
            traceback.print_exc(file=sys.stderr); print(f"Continuing after {CHECK_INTERVAL_SECONDS}s..."); time.sleep(CHECK_INTERVAL_SECONDS)

# --- Script Entry Point ---
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt: print("\nExiting checker script (Ctrl+C)."); sys.exit(0)
    except Exception as e:
        print(f"\n!!! UNHANDLED CRITICAL ERROR DURING SCRIPT SETUP !!!", file=sys.stderr)
        print(f"Error Type: {type(e).__name__}: {e}", file=sys.stderr); traceback.print_exc(file=sys.stderr)
        try: root = tk.Tk(); root.withdraw(); messagebox.showerror("Critical Runtime Error", f"Setup Error:\n{type(e).__name__}: {e}"); root.destroy()
        except Exception as tk_err: print(f"(GUI error msg failed: {tk_err})", file=sys.stderr)
        sys.exit(1)
